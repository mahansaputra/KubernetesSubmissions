apiVersion: apps/v1
kind: Deployment
metadata:
  name: pingpong-deployment
  namespace: exercises
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pingpong
  template:
    metadata:
      labels:
        app: pingpong
    spec:
      initContainers:
      - name: wait-for-postgres
        image: postgres:16.2
        env:
        - name: PGHOST
          valueFrom:
            configMapKeyRef:
              name: pingpong-config
              key: POSTGRES_HOST
        - name: PGPORT
          valueFrom:
            configMapKeyRef:
              name: pingpong-config
              key: POSTGRES_PORT
        - name: PGUSER
          valueFrom:
            configMapKeyRef:
              name: pingpong-config
              key: POSTGRES_USER
        - name: PGPASSWORD
          valueFrom:
            configMapKeyRef:
              name: pingpong-config
              key: POSTGRES_PASSWORD
        - name: PGDATABASE
          valueFrom:
            configMapKeyRef:
              name: pingpong-config
              key: POSTGRES_DB
        command: ['sh', '-c', 'until pg_isready -h $PGHOST -p $PGPORT -U $PGUSER -d $PGDATABASE; do echo waiting for postgres; sleep 2; done;']
      containers:
      - name: pingpong
        image: mahansa/pingpong:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
        envFrom:
        - configMapRef:
            name: pingpong-config
---
apiVersion: v1
kind: Service
metadata:
  name: pingpong-service
  namespace: exercises
spec:
  selector:
    app: pingpong
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pingpong-ingress
  namespace: exercises
spec:
  rules:
  - http:
      paths:
      - path: /pingpong
        pathType: Prefix
        backend:
          service:
            name: pingpong-service
            port:
              number: 80